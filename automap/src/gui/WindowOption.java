package gui;

import main.MidiToOsuConverter;
import util.MidiUtils;
import util.PropertyAdapter;

import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Sequencer;
import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import static javax.swing.ListSelectionModel.SINGLE_SELECTION;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author Kevin, Dudehacker
 */
@SuppressWarnings("serial")
public class WindowOption extends javax.swing.JFrame {

    private final String name;
    private int keySet;
    private int overallDifficulty;
    private int maxChord;
    private boolean coop;
    private boolean mergeHS;
    private boolean extractHitSounds;
    private boolean customHS;
    private JCheckBox extractHitsoundCheckbox;
    private JCheckBox chckbxCustomHitsound;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox coopCheckBox;
    private javax.swing.JCheckBox chckbxMergeHS;
    private javax.swing.JSlider difficultySlider;
    private javax.swing.JButton hitNoteButton;
    private javax.swing.JList<String> hitNoteList;
    private javax.swing.JButton instrumentButton;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider keySetSlider;
    private javax.swing.JSlider maxChordSlider;
    private javax.swing.JButton muteButton;
    private javax.swing.JList<String> outputList;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton sampleButton;
    private javax.swing.JList<String> sampleList;
    private javax.swing.JButton soloButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton volumeButton;
    private JLabel keySetLabel;
    private JLabel difficultyLabel;
    private JLabel chordLabel;
    private Sequencer sequencer;
    private DefaultListModel<String> sampleListModel = new DefaultListModel<String>();
    private DefaultListModel<String> hitNoteListModel = new DefaultListModel<String>();
    private JButton btnAllToHitNotes;
    private JButton btnRestToSample;
    private JButton btnRestToHitNotes;
    private JButton btnClearAll;
    /**
     * Creates new form gui.WindowOption
     *
     * @param midi midi file
     */
    public WindowOption(File midi) throws InvalidMidiDataException, IOException, MidiUnavailableException {
        setTitle("Automap-chan v20231228");
        name = midi.getName();
        readFromProperty();
        Sequencer sequencer = MidiUtils.getSequencer(midi.toString());
        System.out.println("Number of tracks = " + sequencer.getSequence().getTracks().length);
        if (MidiUtils.isMultiInstrumentInSingleTrack(sequencer)) {
            System.out.println("Dealing with multiple instrument in a single track!");
            this.sequencer = MidiUtils.parseToNormalSequencer(sequencer);
        } else {
            this.sequencer = sequencer;
        }
        MidiUtils.fixChannels(sequencer);
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                initComponents();
                initComponents2();
            }
        });

    }

    private void initComponents2() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(dim.width / 2 - getSize().width / 2, dim.height / 2 - getSize().height / 2);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        difficultySlider = new javax.swing.JSlider(1, 10, overallDifficulty);
        int l_maxChord = keySet;
        if (coop) {
            l_maxChord = 2 * keySet;
        }
        maxChordSlider = new javax.swing.JSlider(1, l_maxChord, maxChord);
        keySetSlider = new javax.swing.JSlider(4, 9, keySet);
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        coopCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DefaultListModel<String> list = new DefaultListModel<String>();
        List<Integer> tracks = MidiUtils.getTracks(sequencer);
        for (int i = 0; i < tracks.size(); i++) {
            list.addElement("Track " + tracks.get(i));
        }
        outputList = new javax.swing.JList<String>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sampleList = new javax.swing.JList<String>();
        jScrollPane1 = new javax.swing.JScrollPane();
        hitNoteList = new javax.swing.JList<String>();
        sampleButton = new javax.swing.JButton();
        keySetLabel = new javax.swing.JLabel();
        difficultyLabel = new javax.swing.JLabel();
        chordLabel = new javax.swing.JLabel();
        hitNoteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        instrumentButton = new javax.swing.JButton();
        volumeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        muteButton = new javax.swing.JButton();
        soloButton = new javax.swing.JButton();
        extractHitsoundCheckbox = new javax.swing.JCheckBox();
        extractHitsoundCheckbox.setText("Extract Hitsound");
        extractHitsoundCheckbox.setSelected(extractHitSounds);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        difficultyLabel.setText(Integer.toString(difficultySlider.getValue()));
        difficultySlider.setMinorTickSpacing(1);
        difficultySlider.setPaintLabels(true);
        difficultySlider.setPaintTicks(true);
        difficultySlider.setSnapToTicks(true);
        difficultySlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                difficultyLabel.setText(Integer.toString(difficultySlider.getValue()));
            }
        });

        chordLabel.setText(Integer.toString(maxChordSlider.getValue()));
        maxChordSlider.setMinorTickSpacing(1);
        maxChordSlider.setPaintLabels(true);
        maxChordSlider.setPaintTicks(true);
        maxChordSlider.setSnapToTicks(true);
        maxChordSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                chordLabel.setText(Integer.toString(maxChordSlider.getValue()));
            }
        });

        keySetLabel.setText(Integer.toString(keySetSlider.getValue()));
        keySetSlider.setMinorTickSpacing(1);
        keySetSlider.setPaintLabels(true);
        keySetSlider.setPaintTicks(true);
        keySetSlider.setSnapToTicks(true);
        keySetSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                keySetLabel.setText(Integer.toString(keySetSlider.getValue()));
                int max = keySetSlider.getValue();
                if (coopCheckBox.isSelected()) {
                    max = max * 2;
                }
                maxChordSlider.setMaximum(max);
                maxChordSlider.setValue(keySetSlider.getValue());
            }
        });
        jButton6.setText("Create Beatmap");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setText("Difficulty");
        jLabel5.setText("Max Chord");
        jLabel6.setText("Key Set");

        coopCheckBox.setText("Co-op");
        coopCheckBox.setSelected(coop);
        coopCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                keySetLabel.setText(Integer.toString(keySetSlider.getValue()));
                int max = keySetSlider.getValue();
                if (coopCheckBox.isSelected()) {
                    max = max * 2;
                }
                maxChordSlider.setMaximum(max);
                maxChordSlider.setValue(keySetSlider.getValue());
            }
        });
        outputList.setSelectionMode(SINGLE_SELECTION);
        outputList.setModel(list);
        outputList.setCellRenderer(new CustomRenderer());
        jScrollPane3.setViewportView(outputList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18));

        sampleList.setModel(sampleListModel);
        jScrollPane2.setViewportView(sampleList);

        hitNoteList.setModel(hitNoteListModel);
        jScrollPane1.setViewportView(hitNoteList);

        sampleButton.setText("model.Sample");
        sampleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleButtonActionPerformed(evt);
            }
        });

        hitNoteButton.setText("Hit Notes");
        hitNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitNoteButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel2.setText("model.Sample");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel3.setText("Hit Notes");

        instrumentButton.setText("Instrument");
        instrumentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrumentButtonActionPerformed(evt);
            }
        });

        volumeButton.setText("Volume");
        volumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeButtonActionPerformed(evt);
            }
        });

        JButton btnAllToSample = new JButton("All to model.Sample");
        btnAllToSample.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (!hitNoteListModel.isEmpty()) {
                    for (int i = 0; i < hitNoteListModel.getSize(); i++) {
                        int trackID = getTrackID(hitNoteListModel.getElementAt(i));
                        toSample(trackID);
                    }
                }

                if (outputList.getModel().getSize() != 0) {
                    for (int i = 0; i < outputList.getModel().getSize(); i++) {
                        int trackID = getTrackID(outputList.getModel().getElementAt(i));
                        String s = "Track " + trackID;
                        if (!sampleListModel.contains(s)) {
                            toSample(trackID);
                        }
                    }
                }
            }
        });

        btnAllToHitNotes = new JButton("All to Hit Notes");
        btnAllToHitNotes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (!sampleListModel.isEmpty()) {
                    for (int i = 0; i < sampleListModel.getSize(); i++) {
                        int trackID = getTrackID(sampleListModel.getElementAt(i));
                        toHitNote(trackID);
                    }
                }

                if (outputList.getModel().getSize() != 0) {
                    for (int i = 0; i < outputList.getModel().getSize(); i++) {
                        int trackID = getTrackID(outputList.getModel().getElementAt(i));
                        String s = "Track " + trackID;
                        if (!hitNoteListModel.contains(s)) {
                            toHitNote(trackID);
                        }
                    }
                }

            }
        });

        btnRestToSample = new JButton("Rest to model.Sample");
        btnRestToSample.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (outputList.getModel().getSize() != 0) {
                    for (int i = 0; i < outputList.getModel().getSize(); i++) {
                        int trackID = getTrackID(outputList.getModel().getElementAt(i));
                        String s = "Track " + trackID;
                        if (!sampleListModel.contains(s) && !hitNoteListModel.contains(s)) {
                            toSample(trackID);
                        }

                    }
                }
            }
        });

        btnRestToHitNotes = new JButton("Rest to Hit Notes");
        btnRestToHitNotes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (outputList.getModel().getSize() != 0) {
                    for (int i = 0; i < outputList.getModel().getSize(); i++) {
                        int trackID = getTrackID(outputList.getModel().getElementAt(i));
                        String s = "Track " + trackID;
                        if (!sampleListModel.contains(s) && !hitNoteListModel.contains(s)) {
                            toHitNote(trackID);
                        }

                    }
                }
            }
        });

        btnClearAll = new JButton("Clear All");
        btnClearAll.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                hitNoteListModel.clear();
                sampleListModel.clear();
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(
                                        jScrollPane2, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup().addGap(30).addGroup(jPanel1Layout
                                        .createParallelGroup(Alignment.LEADING)
                                        .addComponent(btnClearAll, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel2)
                                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE,
                                                        Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
                                                        .addComponent(sampleButton, Alignment.TRAILING,
                                                                GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE)
                                                        .addComponent(btnAllToSample, Alignment.TRAILING,
                                                                GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE)
                                                        .addComponent(btnRestToSample, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addPreferredGap(ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(
                                jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 260,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addGap(61))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
                                                        .addComponent(hitNoteButton, GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                                        .addComponent(btnAllToHitNotes, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnRestToHitNotes, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(ComponentPlacement.RELATED, 54, Short.MAX_VALUE).addComponent(jLabel3)
                                                .addGap(77)))
                        .addGap(61))
                .addGroup(jPanel1Layout.createSequentialGroup().addGap(291).addComponent(jLabel1).addContainerGap(460,
                        Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createSequentialGroup().addGap(189)
                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
                        .addGap(38)
                        .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                                .addComponent(instrumentButton, GroupLayout.PREFERRED_SIZE, 168,
                                        GroupLayout.PREFERRED_SIZE)
                                .addComponent(volumeButton, GroupLayout.PREFERRED_SIZE, 168,
                                        GroupLayout.PREFERRED_SIZE))
                        .addGap(96)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING).addGroup(jPanel1Layout
                .createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING).addGroup(jPanel1Layout
                                .createSequentialGroup().addGap(17).addComponent(jLabel1)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 192, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup().addGap(27)
                                                .addComponent(instrumentButton, GroupLayout.PREFERRED_SIZE, 46,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addGap(32).addComponent(volumeButton, GroupLayout.PREFERRED_SIZE, 45,
                                                        GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createSequentialGroup().addGap(64).addComponent(btnClearAll,
                                GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)))
                .addGap(32)
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(sampleButton, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                        .addComponent(hitNoteButton, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
                .addGap(18)
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                        .addComponent(btnRestToSample, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addComponent(btnRestToHitNotes, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(18)
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING).addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(btnAllToSample, GroupLayout.PREFERRED_SIZE, 35,
                                        GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAllToHitNotes, GroupLayout.PREFERRED_SIZE, 33,
                                        GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 192, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 189, GroupLayout.PREFERRED_SIZE))
                .addContainerGap()));
        jPanel1.setLayout(jPanel1Layout);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        muteButton.setText("Mute");
        muteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteButtonActionPerformed(evt);
            }
        });

        soloButton.setText("Solo");
        soloButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloButtonActionPerformed(evt);
            }
        });

        extractHitsoundCheckbox.setText("Extract Hitsound");

        chckbxMergeHS = new JCheckBox("Merge notes faster than 1/4");
        chckbxMergeHS.setSelected(mergeHS);

        chckbxCustomHitsound = new JCheckBox("Custom Hitsound");
        chckbxCustomHitsound.setSelected(customHS);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup().addGap(22).addComponent(jPanel1,
                                        GroupLayout.PREFERRED_SIZE, 680, GroupLayout.PREFERRED_SIZE))
                                .addGroup(
                                        layout.createSequentialGroup().addGap(42)
                                                .addComponent(playButton, GroupLayout.PREFERRED_SIZE, 83,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                                .addComponent(pauseButton, GroupLayout.PREFERRED_SIZE, 83,
                                                        GroupLayout.PREFERRED_SIZE).addGap(18)
                                                .addComponent(stopButton, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
                                                .addGap(88)
                                                .addComponent(soloButton, GroupLayout.PREFERRED_SIZE, 83, GroupLayout.PREFERRED_SIZE)
                                                .addGap(26)
                                                .addComponent(muteButton, GroupLayout.PREFERRED_SIZE, 83, GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup().addGap(78)
                                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup().addComponent(coopCheckBox)
                                                                .addGap(111).addComponent(keySetLabel))
                                                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                                                .addComponent(jButton6, GroupLayout.PREFERRED_SIZE, 200,
                                                                        GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(keySetSlider, GroupLayout.PREFERRED_SIZE,
                                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jLabel6).addComponent(jLabel4)
                                                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                                                        .addComponent(difficultySlider, Alignment.TRAILING,
                                                                                GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                                                GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(maxChordSlider, Alignment.TRAILING,
                                                                                GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                                                GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(difficultyLabel, Alignment.TRAILING)
                                                                        .addComponent(chordLabel, Alignment.TRAILING))
                                                                .addComponent(jLabel5))).addComponent(extractHitsoundCheckbox)
                                                .addComponent(chckbxCustomHitsound).addComponent(chckbxMergeHS))
                                        .addContainerGap(111, Short.MAX_VALUE))
                                .addGroup(Alignment.TRAILING,
                                        layout.createSequentialGroup()
                                                .addPreferredGap(ComponentPlacement.RELATED).addComponent(cancelButton,
                                                        GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                .addGap(71)))));
        layout.setVerticalGroup(layout.createParallelGroup(Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout
                                .createParallelGroup(
                                        Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup().addGap(64).addComponent(jLabel4)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(difficultySlider, GroupLayout.PREFERRED_SIZE, 24,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.RELATED).addComponent(difficultyLabel)
                                        .addGap(37).addComponent(jLabel5).addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(maxChordSlider, GroupLayout.PREFERRED_SIZE, 21,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.UNRELATED).addComponent(chordLabel).addGap(32)
                                        .addComponent(jLabel6).addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(keySetSlider, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(coopCheckBox)
                                                .addComponent(keySetLabel))
                                        .addPreferredGap(ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                        .addComponent(jButton6, GroupLayout.PREFERRED_SIZE, 149, GroupLayout.PREFERRED_SIZE).addGap(18)
                                        .addComponent(extractHitsoundCheckbox).addPreferredGap(ComponentPlacement.UNRELATED)
                                        .addComponent(chckbxCustomHitsound).addPreferredGap(ComponentPlacement.UNRELATED)
                                        .addComponent(chckbxMergeHS).addGap(17))
                                .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jPanel1,
                                        GroupLayout.PREFERRED_SIZE, 601, GroupLayout.PREFERRED_SIZE)))
                        .addGap(18)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(playButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addComponent(pauseButton, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                                .addComponent(stopButton, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                                .addComponent(muteButton, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                                .addComponent(soloButton, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(35, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup().addContainerGap(637, Short.MAX_VALUE)
                        .addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                        .addGap(56)));
        getContentPane().setLayout(layout);

        pack();
    }

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            MidiUtils.playSequence(sequencer);
        } catch (MidiUnavailableException e) {
            e.printStackTrace();
        }
    }

    private void muteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!outputList.isSelectionEmpty()) {
            int trackID = getTrackID(outputList.getSelectedValue());
            if (sequencer.getTrackMute(trackID)) {
                outputList.setSelectionBackground(Color.WHITE);
                MidiUtils.unmuteTrack(sequencer, trackID);
            } else {
                outputList.setSelectionBackground(Color.RED);
                MidiUtils.muteTrack(sequencer, trackID);
            }
        }
        outputList.updateUI();
    }

    private void soloButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!outputList.isSelectionEmpty()) {
            int trackID = getTrackID(outputList.getSelectedValue());
            if (sequencer.getTrackSolo(trackID)) {
                MidiUtils.setTrackNotSolo(sequencer, trackID);
            } else {
                MidiUtils.setTrackSolo(sequencer, trackID);
            }

        }
        outputList.updateUI();
    }

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            MidiUtils.stopSequence(sequencer);
        } catch (InvalidMidiDataException ex) {
            Logger.getLogger(WindowOption.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void sampleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!outputList.isSelectionEmpty()) {
            int trackID = getTrackID(outputList.getSelectedValue());
            toSample(trackID);
        }
    }

    private void instrumentButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!outputList.isSelectionEmpty()) {
            new WindowInstrument(sequencer, getTrackID(outputList.getSelectedValue()));
        }
    }

    private int getTrackID(String trackName) {
        String ID = trackName.substring(6, trackName.length());
        return Integer.parseInt(ID);
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        sequencer.close();
        System.exit(0);
    }

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        MidiUtils.pauseSequence(sequencer);
    }

    private void hitNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!outputList.isSelectionEmpty()) {
            int trackID = getTrackID(outputList.getSelectedValue());
            toHitNote(trackID);
        }
    }

    private void volumeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!outputList.isSelectionEmpty()) {
            new WindowVolume(sequencer, getTrackID(outputList.getSelectedValue()));
        }
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
        extractHitSounds = extractHitsoundCheckbox.isSelected();
        overallDifficulty = difficultySlider.getValue();
        keySet = keySetSlider.getValue();
        maxChord = maxChordSlider.getValue();
        coop = coopCheckBox.isSelected();
        mergeHS = chckbxMergeHS.isSelected();
        customHS = chckbxCustomHitsound.isSelected();
        int keys = keySet;
        if (coop) {
            keys = keySet * 2;
        }
        int[] trackOptions = new int[sequencer.getSequence().getTracks().length];
        for (int i = 0; i < trackOptions.length; i++) {
            trackOptions[i] = -1;
        }
        for (int i = 0; i < sampleListModel.getSize(); i++) {
            int trackID = getTrackID(sampleListModel.getElementAt(i));
            // System.out.println("model.Sample track " + trackID);
            trackOptions[trackID] = 1;
        }
        for (int i = 0; i < hitNoteListModel.getSize(); i++) {
            int trackID = getTrackID(hitNoteListModel.getElementAt(i));
            // System.out.println("hit object track " + trackID);
            trackOptions[trackID] = 0;
        }
        writeToPropertyFile();
        MidiToOsuConverter converter = new MidiToOsuConverter(sequencer, name, extractHitSounds, keys, maxChord,
                overallDifficulty, trackOptions, mergeHS, customHS);
        new Thread(converter).start();
        dispose();

    }

    private void readFromProperty() {
        extractHitSounds = PropertyAdapter.readBooleanFromProperty(PropertyAdapter.EXTRACT_HITSOUND);
        keySet = PropertyAdapter.readIntegerFromProperty(PropertyAdapter.KEY_COUNT);
        overallDifficulty = PropertyAdapter.readIntegerFromProperty(PropertyAdapter.OVERALL_DIFFICULTY);
        maxChord = PropertyAdapter.readIntegerFromProperty(PropertyAdapter.MAX_CHORD);
        coop = PropertyAdapter.readBooleanFromProperty(PropertyAdapter.COOP);
        mergeHS = PropertyAdapter.readBooleanFromProperty(PropertyAdapter.MERGE_HITSOUND);
        customHS = PropertyAdapter.readBooleanFromProperty(PropertyAdapter.CUSTOM_HITSOUND);
    }

    private void toHitNote(int trackID) {
        String element = "Track " + trackID;
        if (!hitNoteListModel.contains(element)) {
            hitNoteListModel.addElement(element);
            sortList(hitNoteListModel);
        } else {
            hitNoteListModel.removeElement(element);
        }
        if (sampleListModel.contains(element)) {
            sampleListModel.removeElement(element);
        }
    }

    private void toSample(int trackID) {
        String element = "Track " + trackID;
        if (!sampleListModel.contains(element)) {
            sampleListModel.addElement(element);
            sortList(sampleListModel);
        } else {
            sampleListModel.removeElement(element);
        }
        if (hitNoteListModel.contains(element)) {
            hitNoteListModel.removeElement(element);
        }
    }

    private void sortList(DefaultListModel<String> listModel) {
        ArrayList<String> al = new ArrayList<>();
        for (int i = 0; i < listModel.size(); i++) {
            al.add(listModel.getElementAt(i));
        }
        Collections.sort(al);
        listModel.clear();
        for (String s : al) {
            listModel.addElement(s);
        }
    }

    private void writeToPropertyFile() {
        Properties prop = new Properties();
        OutputStream output = null;
        InputStream input = null;
        try {
            input = new FileInputStream(PropertyAdapter.FULL_PATH);
            prop.load(input);
            input.close();
            output = new FileOutputStream(PropertyAdapter.FULL_PATH);
            String midiPath = prop.getProperty(PropertyAdapter.MIDI_PATH);
            // set the properties value
            prop.setProperty(PropertyAdapter.MIDI_PATH, midiPath);
            prop.setProperty(PropertyAdapter.EXTRACT_HITSOUND, "" + extractHitSounds);
            prop.setProperty(PropertyAdapter.KEY_COUNT, "" + keySet);
            prop.setProperty(PropertyAdapter.OVERALL_DIFFICULTY, "" + overallDifficulty);
            prop.setProperty(PropertyAdapter.MAX_CHORD, "" + maxChord);
            prop.setProperty(PropertyAdapter.COOP, "" + coop);
            prop.setProperty(PropertyAdapter.MERGE_HITSOUND, "" + mergeHS);
            prop.setProperty(PropertyAdapter.CUSTOM_HITSOUND, "" + customHS);
            // save properties to project root folder
            prop.store(output, null);
            output.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private class CustomRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected,
                                                      boolean cellHasFocus) {
            Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            int trackID = getTrackID((String) value);
            if (sequencer.getTrackSolo(trackID)) {
                setBackground(Color.GREEN);
            } else if (sequencer.getTrackMute(trackID)) {
                setBackground(Color.RED);
            } else if (isSelected) {
                setBackground(Color.cyan);
            } else {
                setBackground(Color.white);
            }

            return c;
        }
    }
}
